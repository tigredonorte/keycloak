name: keycloak

version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: ./server/Dockerfile.server
    ports:
      - "${APP_PORT}:${APP_PORT}"
    volumes:
      - .:/app
    command: npm run dev:server
    env_file:
      - .env
    depends_on:
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${APP_PORT}/ || exit 1"]
      interval: 300s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - my-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    container_name: keycloak
    command: start-dev
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
      KC_DB: ${KC_DB}
      KC_DB_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_PROXY: ${KC_PROXY}
    ports:
      - "${KEYCLOAK_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/realms/master || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 180s

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:

networks:
  my-network:
    driver: bridge
